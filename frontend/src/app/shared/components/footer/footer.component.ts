import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil, timeout, catchError } from 'rxjs/operators';

// üî• IMPORTAR SERVICIOS EXISTENTES
import { EmpresaService } from '../../../services/empresa.service';
import { ImageService } from '../../../services/image.service';
import { CacheService } from '../../../services/cache.service';
import { ConfigService } from '../../../services/config.service'; // üî• IMPORTAR CONFIG SERVICE
import { ThemeService } from '../../../services/theme.service'; // üî• IMPORTAR THEME SERVICE
import { Empresa } from '../../../interfaces/api.interfaces';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule
  ],
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.scss']
})
export class FooterComponent implements OnInit, OnDestroy {

  /**
   * ‚úÖ A√±o actual para el copyright
   */
  currentYear = new Date().getFullYear();

  // üè¢ DATOS DE LA EMPRESA DESDE AIRTABLE
  empresaData: Empresa | null = null;
  empresaNombre: string = '';
  empresaLogo: string = '';
  empresaTelefono: string = '+34 612 345 789';
  empresaEmail: string = 'info@inmoapp.com';
  empresaDireccion: string = 'Almer√≠a, Espa√±a';
  empresaHorario: string = 'Lunes a Viernes: 10:00 a 14:00 h - 17:00 a 20:00 h';

  // Redes sociales
  facebookUrl: string = '#';
  instagramUrl: string = '#';
  twitterUrl: string = '#';
  linkedinUrl: string = '#';

  // Control de imagen - IGUAL QUE NAVBAR
  logoImageError = false;
  imageLoadedFromCache = false;
  fallbackUsed = false;

  private destroy$ = new Subject<void>();

  constructor(
    private empresaService: EmpresaService,
    private imageService: ImageService,
    private cacheService: CacheService,
    private configService: ConfigService, // üî• INYECTAR CONFIG SERVICE
    private themeService: ThemeService // üî• INYECTAR THEME SERVICE
  ) {
    // üî• INICIALIZAR CON VALORES DE CONFIGURACI√ìN
    this.empresaNombre = this.configService.getEmpresaNombreFallback();
    this.empresaLogo = this.configService.getEmpresaIconoFallback();

    // üî• VERIFICAR SI EL CACH√â TIENE DATOS INCORRECTOS
    const empresaNombreConfig = this.configService.getEmpresaNombre();
    const cachedEmpresa = this.cacheService.getEmpresaByName(empresaNombreConfig);
    if (cachedEmpresa &&
        (cachedEmpresa.telefono === undefined || cachedEmpresa.direccion === undefined)) {
      console.log('‚ö†Ô∏è Footer: Cach√© con datos incorrectos detectado, limpiando...');
      this.cacheService.clearEmpresaCache();
      console.log('üßπ Footer: Cach√© limpiado autom√°ticamente');
    }
  }

  ngOnInit(): void {
    // üî• USAR EXACTAMENTE LA MISMA L√ìGICA QUE NAVBAR
    console.log('üöÄ Footer: Iniciando carga de datos de empresa...');
    this.loadEmpresaFromCacheFirst(); // üî• USAR CONFIGURACI√ìN
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  /**
   * üî• CARGAR EMPRESA DESDE CACH√â PERSISTENTE PRIMERO (USANDO CONFIGURACI√ìN)
   */
  private loadEmpresaFromCacheFirst(): void {
    // üî• OBTENER NOMBRE DE EMPRESA DESDE CONFIGURACI√ìN
    const empresaNombreConfig = this.configService.getEmpresaNombre();
    console.log('üîç Footer: Buscando empresa en cach√© persistente (desde config):', empresaNombreConfig);

    const cachedEmpresa = this.cacheService.getEmpresaByName(empresaNombreConfig);

    if (cachedEmpresa) {
      console.log('‚úÖ Footer: Empresa encontrada en cach√© persistente:', cachedEmpresa);

      // üî• APLICAR COLORES INMEDIATAMENTE DESDE CACH√â (SOLO SI NAVBAR NO LOS APLIC√ì)
      this.applyColorsFromCacheIfNeeded(cachedEmpresa);

      // üî• VERIFICAR ESPEC√çFICAMENTE LOS CAMPOS QUE FALTAN
      console.log('üîç Footer: Verificando campos espec√≠ficos:', {
        'telefono en cach√©': cachedEmpresa.telefono,
        'direccion en cach√©': cachedEmpresa.direccion,
        'email en cach√©': cachedEmpresa.email,
        'web en cach√©': cachedEmpresa.web,
        'horario en cach√©': cachedEmpresa.horario // üî• A√ëADIR HORARIO
      });

      this.empresaNombre = cachedEmpresa.nombre;

      // üî• MAPEAR CAMPOS CON LOGS DETALLADOS USANDO FALLBACKS DE CONFIG
      this.empresaTelefono = cachedEmpresa.telefono || '+34 612 345 789';
      console.log('üìû Footer: Tel√©fono final asignado:', this.empresaTelefono);

      this.empresaEmail = cachedEmpresa.email || cachedEmpresa.web || 'info@inmotable.com';
      console.log('üìß Footer: Email/Web final asignado:', this.empresaEmail);

      this.empresaDireccion = cachedEmpresa.direccion || 'Almer√≠a, Espa√±a';
      console.log('üìç Footer: Direcci√≥n final asignada:', this.empresaDireccion);

      // üî• MAPEAR HORARIO DESDE CACH√â
      this.empresaHorario = cachedEmpresa.horario || 'Lunes a Viernes: 10:00 a 14:00 h - 17:00 a 20:00 h';
      console.log('üïê Footer: Horario final asignado:', this.empresaHorario);

      // Redes sociales
      this.facebookUrl = cachedEmpresa.facebook || '#';
      this.instagramUrl = cachedEmpresa.instagram || '#';
      this.twitterUrl = cachedEmpresa.twitter || '#';
      this.linkedinUrl = cachedEmpresa.linkedin || '#';

      console.log('‚úÖ Footer: RESUMEN FINAL - Variables del componente:', {
        nombre: this.empresaNombre,
        telefono: this.empresaTelefono,
        email: this.empresaEmail,
        direccion: this.empresaDireccion,
        horario: this.empresaHorario, // üî• INCLUIR EN RESUMEN
        redes: {
          facebook: this.facebookUrl,
          instagram: this.instagramUrl,
          twitter: this.twitterUrl,
          linkedin: this.linkedinUrl
        }
      });

      // üî• PROCESAR LOGO
      if (cachedEmpresa.logoDataUrl) {
        this.empresaLogo = cachedEmpresa.logoDataUrl;
        this.imageLoadedFromCache = true;
        this.fallbackUsed = false;
        console.log('üñºÔ∏è Footer: Logo cargado INMEDIATAMENTE desde cach√© persistente');
        return; // üî• SALIR AQU√ç - YA TENEMOS TODO
      } else if (cachedEmpresa.logo) {
        // Si es URL de imagen, verificar si est√° cacheada
        if (this.isImageUrl(cachedEmpresa.logo)) {
          const cachedImage = this.cacheService.getCachedImage(cachedEmpresa.logo);
          if (cachedImage) {
            this.empresaLogo = cachedImage;
            this.imageLoadedFromCache = true;
            console.log('üñºÔ∏è Footer: Imagen del logo cargada desde cach√© persistente');
            return; // üî• SALIR AQU√ç - YA TENEMOS TODO
          } else {
            this.empresaLogo = cachedEmpresa.logo;
          }
        } else {
          // Es icono
          this.empresaLogo = cachedEmpresa.logo;
          return; // üî• SALIR AQU√ç - YA TENEMOS TODO
        }
      }
    }

    // Si no hay cach√©, cargar desde API
    console.log('üîÑ Footer: No hay cach√© persistente, cargando desde API...');
    this.loadEmpresaFromAPI();
}
  /**
   * üîÑ CARGAR EMPRESA DESDE API (USANDO CONFIGURACI√ìN)
   */
  private async loadEmpresaFromAPI(): Promise<void> {
    try {
      console.log('üåê Footer: Cargando datos de empresa desde API...');

      // üî• USAR M√âTODO SIMPLIFICADO QUE USA CONFIGURACI√ìN INTERNA
      const empresa = await this.empresaService.getEmpresaPrincipal()
        .pipe(
          timeout(3000),
          catchError(() => this.empresaService.getFirstActive()),
          takeUntil(this.destroy$)
        )
        .toPromise();

      if (empresa) {
        console.log('üìä Footer: Empresa encontrada en API:', empresa);

        // Actualizar datos b√°sicos (IGUAL QUE NAVBAR)
        this.empresaNombre = empresa.nombre || this.configService.getEmpresaNombreFallback();
        this.fallbackUsed = false;

        // üî• MAPEAR CAMPOS ADICIONALES PARA FOOTER
        this.mapearCamposAdicionales(empresa);

        // üî• PROCESAR LOGO (IGUAL QUE NAVBAR)
        if (this.isImageUrl(empresa.logo)) {
          console.log('üñºÔ∏è Footer: Procesando logo de imagen:', empresa.logo);

          // Verificar si ya est√° cacheada
          const cachedImage = this.cacheService.getCachedImage(empresa.logo);
          if (cachedImage) {
            console.log('‚úÖ Footer: Imagen ya estaba cacheada');
            this.empresaLogo = cachedImage;
            this.imageLoadedFromCache = true;

            // Actualizar cach√© de empresa con imagen
            this.updateEmpresaCache(empresa, cachedImage);
          } else {
            console.log('üîÑ Footer: Descargando y cacheando imagen...');
            // Mostrar icono mientras descarga
            this.empresaLogo = 'fas fa-building';

            // Descargar y cachear
            this.cacheService.cacheImage(empresa.logo)
              .pipe(takeUntil(this.destroy$))
              .subscribe({
                next: (cachedImageUrl) => {
                  console.log('‚úÖ Footer: Imagen descargada y cacheada');
                  this.empresaLogo = cachedImageUrl;
                  this.imageLoadedFromCache = true;

                  // Actualizar cach√© de empresa con imagen
                  this.updateEmpresaCache(empresa, cachedImageUrl);
                },
                error: (error) => {
                  console.warn('‚ö†Ô∏è Footer: Error al cachear imagen:', error);
                  this.empresaLogo = 'fas fa-building';
                  this.fallbackUsed = true;
                }
              });
          }
        } else {
          // Es icono, usar directamente
          this.empresaLogo = empresa.logo || 'fas fa-building';
          this.updateEmpresaCache(empresa, null);
        }
      } else {
        console.log('‚ö†Ô∏è Footer: No se encontr√≥ empresa, manteniendo valores por defecto');
        this.fallbackUsed = true;
        this.empresaNombre = this.configService.getEmpresaNombreFallback();
        this.empresaLogo = this.configService.getEmpresaIconoFallback();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Footer: Error al cargar empresa desde API:', error);
      this.fallbackUsed = true;
      this.empresaNombre = this.configService.getEmpresaNombreFallback();
      this.empresaLogo = this.configService.getEmpresaIconoFallback();
    }
  }

  /**
   * üî• APLICAR COLORES DESDE CACH√â SOLO SI ES NECESARIO
   */
  private applyColorsFromCacheIfNeeded(cachedEmpresa: any): void {
    // Solo aplicar si hay colores definidos en cach√© y no se han aplicado a√∫n
    if (cachedEmpresa.colorPrimary) {
      console.log('üé® Footer: Aplicando colores desde cach√©');

      const colorsFromCache = {
        'color-primary': cachedEmpresa.colorPrimary,
        'color-primary-dark': cachedEmpresa.colorPrimaryDark,
        'color-primary-light': cachedEmpresa.colorPrimaryLight,
        'color-primary-rgb': cachedEmpresa.colorPrimaryRgb
      };

      // Verificar si los colores actuales son diferentes
      const currentColors = this.themeService.getCurrentColors();
      if (currentColors.primary !== cachedEmpresa.colorPrimary) {
        this.themeService.applyColorsFromEmpresa(colorsFromCache);
      }
    }
  }

  /**
   * üî• MAPEAR CAMPOS ADICIONALES PARA FOOTER (A√ëADIR HORARIO)
   */
  private mapearCamposAdicionales(empresa: any): void {
    console.log('üìä Footer: Mapeando campos adicionales desde API:', empresa);

    // üî• USAR NOMBRES EXACTOS QUE APARECEN EN EL LOG (MIN√öSCULAS CON ACENTOS)
    this.empresaTelefono = empresa['tel√©fono'] ||        // üî• MIN√öSCULA CON ACENTO (REAL)
                          empresa['Tel√©fono'] ||         // May√∫scula con acento
                          empresa.Telefono ||            // May√∫scula sin acento
                          empresa.telefono ||            // Min√∫scula sin acento
                          '+34 612 345 789';

    console.log('üìû Footer: Tel√©fono mapeado desde API:', this.empresaTelefono);

    this.empresaEmail = empresa.email ||                 // email directo
                       empresa.web ||                    // web como email
                       empresa.Web ||                    // Web con may√∫scula
                       empresa.Email ||                  // Email con may√∫scula
                       'www.inmotable.com';

    console.log('üìß Footer: Email/Web mapeado desde API:', this.empresaEmail);

    this.empresaDireccion = empresa['direcci√≥n'] ||      // üî• MIN√öSCULA CON ACENTO (REAL)
                           empresa['Direcci√≥n'] ||       // May√∫scula con acento
                           empresa.Direccion ||          // May√∫scula sin acento
                           empresa.direccion ||          // Min√∫scula sin acento
                           'Madrid, Espa√±a';

    console.log('üìç Footer: Direcci√≥n mapeada desde API:', this.empresaDireccion);

    // üî• MAPEAR HORARIO DESDE API
    this.empresaHorario = empresa['Horario'] ||          // May√∫scula (nombre de campo en Airtable)
                         empresa.horario ||              // Min√∫scula
                         empresa['horario'] ||           // Min√∫scula con corchetes
                         'Lunes a Viernes: 10:00 a 14:00 h - 17:00 a 20:00 h';

    console.log('üïê Footer: Horario mapeado desde API:', this.empresaHorario);

    // Redes sociales (estos ya funcionan)
    this.facebookUrl = empresa.Facebook || empresa.facebook || '#';
    this.instagramUrl = empresa.Instagram || empresa.instagram || '#';
    this.twitterUrl = empresa.Twitter || empresa.twitter || '#';
    this.linkedinUrl = empresa.LinkedIn || empresa.linkedin || '#';

    console.log('‚úÖ Footer: TODOS los campos mapeados desde API:', {
      telefono: this.empresaTelefono,
      email: this.empresaEmail,
      direccion: this.empresaDireccion,
      horario: this.empresaHorario, // üî• INCLUIR HORARIO EN LOGS
      redes: {
        facebook: this.facebookUrl,
        instagram: this.instagramUrl,
        twitter: this.twitterUrl,
        linkedin: this.linkedinUrl
      }
    });
  }

  /**
   * üîÑ ACTUALIZAR CACH√â DE EMPRESA (INCLUIR HORARIO)
   */
  private updateEmpresaCache(empresa: Empresa, logoDataUrl: string | null): void {
    const cacheData: any = {
      id: empresa.id,
      nombre: empresa.nombre,
      logo: empresa.logo,
      estado: empresa.estado,
      logoDataUrl: logoDataUrl || undefined,

      // üî• USAR NOMBRES EXACTOS QUE APARECEN EN LOS LOGS
      telefono: (empresa as any)['tel√©fono'] ||          // MIN√öSCULA CON ACENTO
               (empresa as any)['Tel√©fono'] ||           // MAY√öSCULA CON ACENTO
               (empresa as any).telefono,                // MIN√öSCULA SIN ACENTO

      email: (empresa as any).email || (empresa as any).Email,

      direccion: (empresa as any)['direcci√≥n'] ||        // MIN√öSCULA CON ACENTO
                (empresa as any)['Direcci√≥n'] ||         // MAY√öSCULA CON ACENTO
                (empresa as any).direccion,              // MIN√öSCULA SIN ACENTO

      web: (empresa as any).Web || (empresa as any).web,

      // üî• INCLUIR HORARIO EN CACH√â
      horario: (empresa as any)['Horario'] ||            // MAY√öSCULA (AIRTABLE)
              (empresa as any).horario ||                // MIN√öSCULA
              (empresa as any)['horario'],               // MIN√öSCULA CON CORCHETES

      // Redes sociales
      facebook: (empresa as any).Facebook || (empresa as any).facebook,
      instagram: (empresa as any).Instagram || (empresa as any).instagram,
      twitter: (empresa as any).Twitter || (empresa as any).twitter,
      linkedin: (empresa as any).LinkedIn || (empresa as any).linkedin,

      // Otros campos
      idEmpresa: (empresa as any)['ID Empresa'] || (empresa as any).idEmpresa
    };

    console.log('üíæ Footer: Cach√© de empresa actualizado con campos corregidos (incluye horario):', cacheData);
    this.cacheService.setEmpresa(cacheData);
  }

  /**
   * üñºÔ∏è CARGAR IMAGEN DEL LOGO
   */
  private loadLogoImage(logoUrl: string): void {
    console.log('üñºÔ∏è Footer: Cargando imagen del logo:', logoUrl);

    // Verificar cach√© primero
    const cachedImage = this.cacheService.getCachedImage(logoUrl);
    if (cachedImage) {
      console.log('‚úÖ Footer: Logo encontrado en cach√©');
      this.empresaLogo = cachedImage;
      this.imageLoadedFromCache = true;
      return;
    }

    // Si no est√° en cach√©, cachear
    this.cacheService.cacheImage(logoUrl)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (cachedImageUrl: any) => {
          console.log('‚úÖ Footer: Logo cacheado exitosamente');
          this.empresaLogo = cachedImageUrl;
          this.imageLoadedFromCache = true;
        },
        error: (error: any) => {
          console.warn('‚ö†Ô∏è Footer: Error al cachear logo:', error);
          this.empresaLogo = 'fas fa-building';
          this.logoImageError = true;
        }
      });
  }

  /**
   * üîÑ VERIFICAR SI ES URL DE IMAGEN
   */
  private isImageUrl(url: string): boolean {
    if (!url) return false;
    return url.startsWith('http') || url.startsWith('data:image') || url.startsWith('blob:');
  }

  /**
   * üè† OBTENER LOGO DE LA EMPRESA
   */
  getEmpresaLogo(): string {
    if (this.logoImageError) {
      return 'fas fa-building';
    }

    if (this.empresaLogo && (this.empresaLogo.startsWith('http') || this.empresaLogo.startsWith('data:image'))) {
      return this.empresaLogo;
    }

    return this.empresaLogo || 'fas fa-building';
  }

  /**
   * üè¢ VERIFICAR SI EL LOGO ES UNA IMAGEN
   */
  isLogoImage(): boolean {
    if (this.logoImageError) return false;
    return !!(this.empresaLogo && typeof this.empresaLogo === 'string' &&
      (this.empresaLogo.startsWith('http') || this.empresaLogo.startsWith('data:image')));
  }

  /**
   * üè¢ VERIFICAR SI EL LOGO ES UN ICONO
   */
  isLogoIcon(): boolean {
    return !this.isLogoImage();
  }

  /**
   * üñºÔ∏è MANEJAR ERROR DE CARGA DE IMAGEN
   */
  onLogoImageError(event: any): void {
    console.warn('‚ùå Footer: Error al cargar imagen del logo:', this.empresaLogo);
    this.logoImageError = true;

    if (event && event.target) {
      event.target.style.display = 'none';
    }
  }

  /**
   * üî• MANEJAR CARGA EXITOSA DE IMAGEN
   */
  onLogoImageLoad(): void {
    console.log('‚úÖ Footer: Imagen del logo cargada exitosamente');
    this.logoImageError = false;
  }

  /**
   * üîó NAVEGAR A REDES SOCIALES CON URLs REALES
   */
  navigateToSocial(platform: string, url: string): void {
    console.log(`üîó Footer: Navegando a ${platform}:`, url);

    if (url && url !== '#') {
      let finalUrl = url;
      if (!url.startsWith('http://') && !url.startsWith('https://')) {
        finalUrl = 'https://' + url;
      }

      window.open(finalUrl, '_blank', 'noopener,noreferrer');
    } else {
      console.log(`‚ö†Ô∏è Footer: No hay URL configurada para ${platform}`);
    }
  }

  /**
   * üìß SUSCRIBIRSE AL NEWSLETTER
   */
  subscribeNewsletter(email: string): void {
    console.log('üìß Footer: Suscripci√≥n al newsletter:', email);
    // TODO: Implementar l√≥gica de suscripci√≥n
  }

  /**
   * üî• A√ëADIR M√âTODO DE DEBUG ESPEC√çFICO
   */
  private debugCacheFields(cachedEmpresa: any): void {
    console.log('üîç Footer: DEBUG - Analizando campos del cach√©:');
    console.log('  üìû Tel√©fono disponible en:', {
      'telefono': cachedEmpresa.telefono
    });

    console.log('  üìß Email/Web disponible en:', {
      'email': cachedEmpresa.email,
      'web': cachedEmpresa.web
    });

    console.log('  üìç Direcci√≥n disponible en:', {
      'direccion': cachedEmpresa.direccion
    });

    console.log('  üåê Redes sociales disponibles en:', {
      'facebook': cachedEmpresa.facebook,
      'instagram': cachedEmpresa.instagram,
      'twitter': cachedEmpresa.twitter,
      'linkedin': cachedEmpresa.linkedin
    });
  }
}
